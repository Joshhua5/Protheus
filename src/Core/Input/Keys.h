#pragma once
#include <PreDefinition.h>

#ifdef __WINDOWS__
#include <Windows.h>
#elif defined(__APPLE__)
enum {
    kVK_ANSI_A                    = 0x00,
    kVK_ANSI_S                    = 0x01,
    kVK_ANSI_D                    = 0x02,
    kVK_ANSI_F                    = 0x03,
    kVK_ANSI_H                    = 0x04,
    kVK_ANSI_G                    = 0x05,
    kVK_ANSI_Z                    = 0x06,
    kVK_ANSI_X                    = 0x07,
    kVK_ANSI_C                    = 0x08,
    kVK_ANSI_V                    = 0x09,
    kVK_ANSI_B                    = 0x0B,
    kVK_ANSI_Q                    = 0x0C,
    kVK_ANSI_W                    = 0x0D,
    kVK_ANSI_E                    = 0x0E,
    kVK_ANSI_R                    = 0x0F,
    kVK_ANSI_Y                    = 0x10,
    kVK_ANSI_T                    = 0x11,
    kVK_ANSI_1                    = 0x12,
    kVK_ANSI_2                    = 0x13,
    kVK_ANSI_3                    = 0x14,
    kVK_ANSI_4                    = 0x15,
    kVK_ANSI_6                    = 0x16,
    kVK_ANSI_5                    = 0x17,
    kVK_ANSI_Equal                = 0x18,
    kVK_ANSI_9                    = 0x19,
    kVK_ANSI_7                    = 0x1A,
    kVK_ANSI_Minus                = 0x1B,
    kVK_ANSI_8                    = 0x1C,
    kVK_ANSI_0                    = 0x1D,
    kVK_ANSI_RightBracket         = 0x1E,
    kVK_ANSI_O                    = 0x1F,
    kVK_ANSI_U                    = 0x20,
    kVK_ANSI_LeftBracket          = 0x21,
    kVK_ANSI_I                    = 0x22,
    kVK_ANSI_P                    = 0x23,
    kVK_ANSI_L                    = 0x25,
    kVK_ANSI_J                    = 0x26,
    kVK_ANSI_Quote                = 0x27,
    kVK_ANSI_K                    = 0x28,
    kVK_ANSI_Semicolon            = 0x29,
    kVK_ANSI_Backslash            = 0x2A,
    kVK_ANSI_Comma                = 0x2B,
    kVK_ANSI_Slash                = 0x2C,
    kVK_ANSI_N                    = 0x2D,
    kVK_ANSI_M                    = 0x2E,
    kVK_ANSI_Period               = 0x2F,
    kVK_ANSI_Grave                = 0x32,
    kVK_ANSI_KeypadDecimal        = 0x41,
    kVK_ANSI_KeypadMultiply       = 0x43,
    kVK_ANSI_KeypadPlus           = 0x45,
    kVK_ANSI_KeypadClear          = 0x47,
    kVK_ANSI_KeypadDivide         = 0x4B,
    kVK_ANSI_KeypadEnter          = 0x4C,
    kVK_ANSI_KeypadMinus          = 0x4E,
    kVK_ANSI_KeypadEquals         = 0x51,
    kVK_ANSI_Keypad0              = 0x52,
    kVK_ANSI_Keypad1              = 0x53,
    kVK_ANSI_Keypad2              = 0x54,
    kVK_ANSI_Keypad3              = 0x55,
    kVK_ANSI_Keypad4              = 0x56,
    kVK_ANSI_Keypad5              = 0x57,
    kVK_ANSI_Keypad6              = 0x58,
    kVK_ANSI_Keypad7              = 0x59,
    kVK_ANSI_Keypad8              = 0x5B,
    kVK_ANSI_Keypad9              = 0x5C
};

/* keycodes for keys that are independent of keyboard layout*/
enum {
    kVK_Return                    = 0x24,
    kVK_Tab                       = 0x30,
    kVK_Space                     = 0x31,
    kVK_Delete                    = 0x33,
    kVK_Escape                    = 0x35,
    kVK_Command                   = 0x37,
    kVK_Shift                     = 0x38,
    kVK_CapsLock                  = 0x39,
    kVK_Option                    = 0x3A,
    kVK_Control                   = 0x3B,
    kVK_RightShift                = 0x3C,
    kVK_RightOption               = 0x3D,
    kVK_RightControl              = 0x3E,
    kVK_Function                  = 0x3F,
    kVK_F17                       = 0x40,
    kVK_VolumeUp                  = 0x48,
    kVK_VolumeDown                = 0x49,
    kVK_Mute                      = 0x4A,
    kVK_F18                       = 0x4F,
    kVK_F19                       = 0x50,
    kVK_F20                       = 0x5A,
    kVK_F5                        = 0x60,
    kVK_F6                        = 0x61,
    kVK_F7                        = 0x62,
    kVK_F3                        = 0x63,
    kVK_F8                        = 0x64,
    kVK_F9                        = 0x65,
    kVK_F11                       = 0x67,
    kVK_F13                       = 0x69,
    kVK_F16                       = 0x6A,
    kVK_F14                       = 0x6B,
    kVK_F10                       = 0x6D,
    kVK_F12                       = 0x6F,
    kVK_F15                       = 0x71,
    kVK_Help                      = 0x72,
    kVK_Home                      = 0x73,
    kVK_PageUp                    = 0x74,
    kVK_ForwardDelete             = 0x75,
    kVK_F4                        = 0x76,
    kVK_End                       = 0x77,
    kVK_F2                        = 0x78,
    kVK_PageDown                  = 0x79,
    kVK_F1                        = 0x7A,
    kVK_LeftArrow                 = 0x7B,
    kVK_RightArrow                = 0x7C,
    kVK_DownArrow                 = 0x7D,
    kVK_UpArrow                   = 0x7E
};
#endif

namespace Pro {
	namespace Input {
		enum struct KEY {
#ifdef __WINDOWS__
			KEY_SPACE = VK_SPACE,
			KEY_APOSTROPHE = -8  /* ' */,
			KEY_COMMA = -4  /* , */,
			KEY_MINUS = -5  /* - */,
			KEY_PERIOD = -6  /* . */,
			KEY_SLASH = -7  /* / */,
			KEY_0 = 0x30,
			KEY_1 = 0x31,
			KEY_2 = 0x32,
			KEY_3 = 0x33,
			KEY_4 = 0x34,
			KEY_5 = 0x35,
			KEY_6 = 0x36,
			KEY_7 = 0x37,
			KEY_8 = 0x38,
			KEY_9 = 0x39,
			KEY_SEMICOLON = VK_OEM_1  /* ; */,
			KEY_EQUAL = VK_OEM_PLUS  /* = */,
			KEY_A = 0x41,
			KEY_B = 0x42,
			KEY_C = 0x43,
			KEY_D = 0x44,
			KEY_E = 0x45,
			KEY_F = 0x46,
			KEY_G = 0x47,
			KEY_H = 0x48,
			KEY_I = 0x49,
			KEY_J = 0x4A,
			KEY_K = 0x4B,
			KEY_L = 0x4C,
			KEY_M = 0x4D,
			KEY_N = 0x4E,
			KEY_O = 0x4F,
			KEY_P = 0x50,
			KEY_Q = 0x51,
			KEY_R = 0x52,
			KEY_S = 0x53,
			KEY_T = 0x54,
			KEY_U = 0x55,
			KEY_V = 0x56,
			KEY_W = 0x57,
			KEY_X = 0x58,
			KEY_Y = 0x59,
			KEY_Z = 0x5A,
			KEY_LEFT_BRACKET = -9  /* [ */,
			KEY_BACKSLASH = -11  /* \ */,
			KEY_RIGHT_BRACKET = -12  /* ] */,
			KEY_GRAVE_ACCENT = -13  /* ` */,
			KEY_WORLD_1 = -14 /* non-US #1 */,
			KEY_WORLD_2 = -15 /* non-US #2 */,
			KEY_ESCAPE = VK_ESCAPE,
			KEY_RETURN = VK_RETURN,
			KEY_TAB = VK_TAB,
			KEY_BACKSPACE = VK_BACK,
			KEY_INSERT = VK_INSERT,
			KEY_DELETE = VK_DELETE,
			KEY_RIGHT = VK_RIGHT,
			KEY_LEFT = VK_LEFT,
			KEY_DOWN = VK_DOWN,
			KEY_UP = VK_UP,
			KEY_PAGE_UP = VK_PRIOR,
			KEY_PAGE_DOWN = VK_NEXT,
			KEY_HOME = VK_HOME,
			KEY_END = VK_END,
			KEY_CAPS_LOCK = VK_CAPITAL,
			KEY_SCROLL_LOCK = VK_SCROLL,
			KEY_NUM_LOCK = VK_NUMLOCK,
			KEY_PRINT_SCREEN = VK_SNAPSHOT,
			KEY_PAUSE = VK_PAUSE,
			KEY_F1 = VK_F1,
			KEY_F2 = VK_F2,
			KEY_F3 = VK_F3,
			KEY_F4 = VK_F4,
			KEY_F5 = VK_F5,
			KEY_F6 = VK_F6,
			KEY_F7 = VK_F7,
			KEY_F8 = VK_F8,
			KEY_F9 = VK_F9,
			KEY_F10 = VK_F10,
			KEY_F11 = VK_F11,
			KEY_F12 = VK_F12,
			KEY_F13 = VK_F13,
			KEY_F14 = VK_F14,
			KEY_F15 = VK_F15,
			KEY_F16 = VK_F16,
			KEY_F17 = VK_F17,
			KEY_F18 = VK_F18,
			KEY_F19 = VK_F19,
			KEY_F20 = VK_F20,
			KEY_KP_0 = VK_NUMPAD0,
			KEY_KP_1 = VK_NUMPAD1,
			KEY_KP_2 = VK_NUMPAD2,
			KEY_KP_3 = VK_NUMPAD3,
			KEY_KP_4 = VK_NUMPAD4,
			KEY_KP_5 = VK_NUMPAD5,
			KEY_KP_6 = VK_NUMPAD6,
			KEY_KP_7 = VK_NUMPAD7,
			KEY_KP_8 = VK_NUMPAD8,
			KEY_KP_9 = VK_NUMPAD9,
			KEY_KP_DECIMAL = VK_DECIMAL,
			KEY_KP_DIVIDE = VK_DIVIDE,
			KEY_KP_MULTIPLY = VK_MULTIPLY,
			KEY_KP_SUBTRACT = VK_SUBTRACT,
			KEY_KP_ADD = VK_ADD,
			KEY_KP_ENTER = VK_RETURN,
			KEY_KP_EQUAL = -10,
			KEY_LEFT_SHIFT = VK_SHIFT,
			KEY_LEFT_CONTROL = VK_CONTROL,
			KEY_LEFT_ALT = VK_MENU,
			KEY_RIGHT_SHIFT = VK_RSHIFT,
			KEY_RIGHT_CONTROL = VK_RCONTROL,
			KEY_RIGHT_ALT = VK_RMENU,
			KEY_MENU = VK_APPS,
			MODIFIER_SHIFT = VK_SHIFT,
			MODIFIER_CONTROL = VK_CONTROL,
			MODIFIER_ALT = VK_MENU,
			MOUSE_BUTTON_1 = VK_XBUTTON1,
			MOUSE_BUTTON_2 = VK_XBUTTON2,
			MOUSE_BUTTON_LEFT = VK_LBUTTON,
			MOUSE_BUTTON_RIGHT = VK_RBUTTON,
			MOUSE_BUTTON_MIDDLE = VK_MBUTTON,
#elif defined(__APPLE__)
			KEY_SPACE = kVK_Space,
			KEY_APOSTROPHE = -2  /* ' */,
			KEY_COMMA = kVK_ANSI_Comma  /* , */,
			KEY_MINUS = kVK_ANSI_Minus  /* - */,
			KEY_PERIOD = kVK_ANSI_Period  /* . */,
			KEY_SLASH = kVK_ANSI_Slash  /* / */,
			KEY_0 = kVK_ANSI_0,
			KEY_1 = kVK_ANSI_1,
			KEY_2 = kVK_ANSI_2,
			KEY_3 = kVK_ANSI_3,
			KEY_4 = kVK_ANSI_4,
			KEY_5 = kVK_ANSI_5,
			KEY_6 = kVK_ANSI_6,
			KEY_7 = kVK_ANSI_7,
			KEY_8 = kVK_ANSI_8,
			KEY_9 = kVK_ANSI_9,
			KEY_SEMICOLON = kVK_ANSI_Semicolon  /* ; */,
			KEY_EQUAL = kVK_ANSI_Equal  /* = */,
			KEY_A = kVK_ANSI_A,
			KEY_B = kVK_ANSI_B,
			KEY_C = kVK_ANSI_C,
			KEY_D = kVK_ANSI_D,
			KEY_E = kVK_ANSI_E,
			KEY_F = kVK_ANSI_F,
			KEY_G = kVK_ANSI_G,
			KEY_H = kVK_ANSI_H,
			KEY_I = kVK_ANSI_I,
			KEY_J = kVK_ANSI_J,
			KEY_K = kVK_ANSI_K,
			KEY_L = kVK_ANSI_L,
			KEY_M = kVK_ANSI_M,
			KEY_N = kVK_ANSI_N,
			KEY_O = kVK_ANSI_O,
			KEY_P = kVK_ANSI_P,
			KEY_Q = kVK_ANSI_Q,
			KEY_R = kVK_ANSI_R,
			KEY_S = kVK_ANSI_S,
			KEY_T = kVK_ANSI_T,
			KEY_U = kVK_ANSI_U,
			KEY_V = kVK_ANSI_V,
			KEY_W = kVK_ANSI_W,
			KEY_X = kVK_ANSI_X,
			KEY_Y = kVK_ANSI_Y,
			KEY_Z = kVK_ANSI_Z,
			KEY_LEFT_BRACKET = kVK_ANSI_LeftBracket  /* [ */,
			KEY_BACKSLASH = kVK_ANSI_Backslash  /* \ */,
			KEY_RIGHT_BRACKET = kVK_ANSI_RightBracket  /* ] */,
			KEY_GRAVE_ACCENT = kVK_ANSI_Grave  /* ` */,
			KEY_WORLD_1 = -2 /* non-US #1 */,
			KEY_WORLD_2 = -3 /* non-US #2 */,
			KEY_ESCAPE = kVK_Escape,
			KEY_RETURN = kVK_Return,
			KEY_TAB = kVK_Tab,
			KEY_BACKSPACE = kVK_Delete,
			KEY_INSERT = -4,
			KEY_DELETE = kVK_Delete,
			KEY_RIGHT = kVK_RightArrow,
			KEY_LEFT = kVK_LeftArrow,
			KEY_DOWN = kVK_DownArrow,
			KEY_UP = kVK_UpArrow,
			KEY_PAGE_UP = kVK_PageUp,
			KEY_PAGE_DOWN = kVK_PageDown,
			KEY_HOME = kVK_Home,
			KEY_END = kVK_End,
			KEY_CAPS_LOCK = kVK_CapsLock,
			KEY_SCROLL_LOCK = -5,
			KEY_NUM_LOCK = -6,
			KEY_PRINT_SCREEN = -7,
			KEY_PAUSE = -8,
			KEY_F1 = kVK_F1,
			KEY_F2 = kVK_F2,
			KEY_F3 = kVK_F3,
			KEY_F4 = kVK_F4,
			KEY_F5 = kVK_F5,
			KEY_F6 = kVK_F6,
			KEY_F7 = kVK_F7,
			KEY_F8 = kVK_F8,
			KEY_F9 = kVK_F9,
			KEY_F10 = kVK_F10,
			KEY_F11 = kVK_F12,
			KEY_F12 = kVK_F13,
			KEY_F13 = kVK_F13,
			KEY_F14 = kVK_F14,
			KEY_F15 = kVK_F15,
			KEY_F16 = kVK_F16,
			KEY_F17 = kVK_F17,
			KEY_F18 = kVK_F18,
			KEY_F19 = kVK_F19,
			KEY_F20 = kVK_F20,
			KEY_KP_0 = kVK_ANSI_Keypad0,
			KEY_KP_1 = kVK_ANSI_Keypad1,
			KEY_KP_2 = kVK_ANSI_Keypad2,
			KEY_KP_3 = kVK_ANSI_Keypad3,
			KEY_KP_4 = kVK_ANSI_Keypad4,
			KEY_KP_5 = kVK_ANSI_Keypad5,
			KEY_KP_6 = kVK_ANSI_Keypad6,
			KEY_KP_7 = kVK_ANSI_Keypad7,
			KEY_KP_8 = kVK_ANSI_Keypad8,
			KEY_KP_9 = kVK_ANSI_Keypad9,
			KEY_KP_DECIMAL = kVK_ANSI_KeypadDecimal,
			KEY_KP_DIVIDE = kVK_ANSI_KeypadDivide,
			KEY_KP_MULTIPLY = kVK_ANSI_KeypadMultiply,
			KEY_KP_SUBTRACT = kVK_ANSI_KeypadMinus,
			KEY_KP_ADD = kVK_ANSI_KeypadPlus,
			KEY_KP_ENTER = kVK_ANSI_KeypadEnter,
			KEY_KP_EQUAL = kVK_ANSI_KeypadEquals,
			KEY_LEFT_SHIFT = kVK_Shift,
			KEY_LEFT_CONTROL = kVK_Control,
			KEY_LEFT_ALT = kVK_Option,
			KEY_RIGHT_SHIFT = kVK_Shift,
			KEY_RIGHT_CONTROL = kVK_Control,
			KEY_RIGHT_ALT = kVK_Option,
			KEY_MENU = kVK_Command,
            KEY_COMMAND = KEY_MENU,
			KEY_LAST = KEY_MENU,
			MODIFIER_SHIFT = kVK_Shift,
			MODIFIER_CONTROL = kVK_Control,
			MODIFIER_ALT = kVK_Option,
			MOUSE_BUTTON_1 = 0x83,
			MOUSE_BUTTON_2 = 0x84,
			MOUSE_BUTTON_LEFT = 0x80,
			MOUSE_BUTTON_RIGHT = 0x81,
			MOUSE_BUTTON_MIDDLE = 0x82,
#elif defined(__LINUX__)
#else
#error "UNKNOWN OS TYPE"
#endif
			KEY_UNKNOWN = -1,
			SIZE = 512
		};

		/*! Can be cased with bool for use inside of a if-statement
			PRESSED and REPEAT will both return true
			*/
		enum struct KEY_PRESSED {
			RELEASED = 0,
			PRESSED = 1,
			REPEAT = 2,
			UNKNOWN = -1
		};


		//! Converts a key to a universal key which is platform independance
        static inline KEY UniversalToKey(unsigned universal_key){
#ifdef __WINDOWS__
			switch (universal_key){
			default:
				return KEY::KEY_UNKNOWN;
			}
#elif defined(__APPLE__)
			switch (universal_key){
			default:
				return KEY::KEY_UNKNOWN;
			}
#elif defined(__LINUX__)
            switch(universal_key){
            default:
                return KEY::KEY_UNKNOWN;
            }
#endif
		}

		//! Converts a universal key back into a key which is platform dependant.
        static inline unsigned KeyToUniversal(KEY key){
#ifdef __WINDOWS__
			switch (key){
			default:
				return 0;
			}
#elif defined(__APPLE__)
			switch (key){
			default:
				return 0;
			}
#elif defined(__LINUX__)
            switch(key){
            default:
                return 0;
            }
#endif
		}

	}
}
